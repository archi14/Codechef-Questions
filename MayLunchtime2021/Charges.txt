#include <iostream>
#include <bits/stdc++.h>
/**
This may seem like a segment tree question at first instant with queries and changes of similiar format, but 
sometimes we should not presume a approach before trying simpler ones. In this we are changing the charge of ith
index and then we have to output the total charge after that. First thing we would do is to calculate the total
charge initially.
Then when some index is changed, it affects the value of it's neighbour i.e i-1 and i+1. let's look at some cases for 
i and i-1.
i-1 i
1   1 -> 0 (-1)
1   0 -> 1 (1)
0   1 -> 0 (1)
0   0 -> 1  (-1)
the digits before -> denote the previous states of i and i-1, we could observe that if at last i and i-1 become same
then we would gain 1 charge, if unequal we would lose one charge, similiar hypothesis could be used to i and i+1.
We could use this to get the total charge after a change by just comparing the neighbouring charges

**/
using namespace std;

char flip(char e)
{
    if(e=='1')
    {
        return '0';
    }
    return '1';
}

int main() {
    int t;
    cin>>t;
    while(t--)
    {
        int n,k;
        cin>>n>>k;
        string elements;
        cin>>elements;
        int q[k];
        for(int i=0;i<k;i++)
        {
            cin>>q[i];
        }
        int distance=0;
        for(int i=1;i<n;i++)
        {
            if(elements[i]==elements[i-1])
            {
                distance+=2;
            }else
            {
                distance+=1;
            }
        }
        for(int i=0;i<k;i++)
        {
            int index=q[i]-1;
            char changed = flip(elements[index]);
            if(index-1>=0)
            {
                if(changed==elements[index-1])
                {
                    distance+=1;
                }else
                {
                    distance-=1;
                }
            }
            if(index+1<n)
            {
                if(changed==elements[index+1])
                {
                    distance+=1;
                }else
                {
                    distance-=1;
                }
            }
            elements[index]= changed;
            cout<<distance<<" ";
        }
    }
}
