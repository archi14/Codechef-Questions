#include <iostream>
#include <bits/stdc++.h>

using namespace std;

/**
Somehow I kept going back to some recursive approach for this question, whereas nothing of sorts is required.
We just want the minimum number of operations for that we need to change all elements to the element that is 
occuring maximum number of times. Hence we first need to find the count of the maximum occurring elements then
by subtracting the total count from that, we get the minimum number of operations required.

count = Total_elements - count_of_max_occuring_element

**/
int main() {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int a[n];
        map<int,int> m;
        for(int i=0;i<n;i++)
        {
            cin>>a[i];
            if(m.find(a[i])==m.end())
            {
                m[a[i]]=1;
            }else
            {
                m[a[i]]++;
            }
        }
        
        int maximum =0;
        for(auto x:m)
        {
            maximum = max(maximum, x.second);
        }
        int count = n-maximum;
        cout<<count<<endl;
        
    }
    
    
}
