#include <iostream>
#include <bits/stdc++.h>
using namespace std;

/**
At first hand the question seems to be of largest sum palindrom, it is not clarified clearly in the question
that we can take weights out of order. If that is the case the we just have to take up even number of any weights
and keep adding them to sum and check if sum+weight_of_rod > requiredSum or not, if yes then return true.
**/
int main() {
	
	int t;
	cin>>t;
	while(t--)
	{
	    int n,w,wr,f=0;
	    cin>>n>>w>>wr;
	    int a[n];
	    map<int,int> m;
	    for(int i=0;i<n;i++)
	    {
	        cin>>a[i];
	        if(m.find(a[i])==m.end())
	        {
	            m[a[i]]=1;
	        }else
	        {
	            m[a[i]]++;
	        }
	    }
	    int sumRequired = w-wr;
	    if(sumRequired<=0)
	    {
	        f=1;
	    }else
	    {
	        long long int sum=0;
    	   for(auto e:m)
    	   {
    	       sum+= (long long int)e.first*2*(e.second/2);
    	       if(sum>=sumRequired)
    	       {
    	           f=1;
    	           break;
    	       }
    	   }
	    }
	    if(f)
	    {
	        cout<<"YES"<<endl;
	    }else
	    {
	        cout<<"NO"<<endl;
	    }
	}
}
